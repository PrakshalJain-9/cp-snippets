{
    "C++ Utility Snippet": {
        "prefix": "cp",
        "body": [
            "// clang-format off",
            "#include <bits/stdc++.h>",
            "#include <chrono>",
            "#include <ext/pb_ds/assoc_container.hpp> ",
            "#include <ext/pb_ds/tree_policy.hpp>",
            "",
            "using namespace __gnu_pbds;",
            "using namespace std;",
            "",
            "#define endl \"\\n\"",
            "#define MOD 1000000007",
            "#define MOD2 998244353",
            "#define infinity 1e18",
            "#define rinfinity -1e18",
            "#define int long long",
            "#define ll long long ",
            "#define vi vector<int>",
            "#define vd vector<double>",
            "#define pii pair<int, int>",
            "#define vpi vector<pii>",
            "#define ld long double",
            "#define db double",
            "#define setBits(a) __builtin_popcountll(a)",
            "#define all(a) a.begin(), a.end()",
            "#define fast ios_base::sync_with_stdio(false); cin.tie(NULL);",
            "#define no cout << \"NO\" << endl;",
            "#define yes cout << \"YES\" << endl;",
            "#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>",
            "#define ordered_multiset tree<pii, null_type,less<pii>, rb_tree_tag,tree_order_statistics_node_update>",
            "",
            "template <typename T, typename K> ostream &operator<<(ostream &obj, const pair<T, K> &p) { return obj << p.first << \" \" << p.second ; }",
            "template <typename T, typename K, typename Compare = less<T>> ostream &operator<<(ostream &obj, const map<T, K, Compare> &arr) { for (const auto &[key, value] : arr) obj << key << \" \" << value << endl; obj << endl; return obj; }",
            "template <typename T, typename K, typename Compare = less<T>> ostream &operator<<(ostream &obj, const unordered_map<T, K, Compare> &arr) { for (const auto &[key, value] : arr) obj << key << \" \" << value << endl; obj << endl; return obj; }",
            "template <typename T, typename Compare = less<T>> ostream &operator<<(ostream &obj, const multiset<T, Compare> &arr) { for (const auto &elem : arr) obj << elem << \" \"; obj << endl; return obj; }",
            "template <typename T, typename Compare = less<T>> ostream &operator<<(ostream &obj, const set<T, Compare> &arr) { for (const auto &elem : arr) obj << elem << \" \"; obj << endl; return obj; }",
            "template <typename T> ostream &operator<<(ostream &obj, const vector<T> &arr) { for (const auto &elem : arr) obj << elem << \" \"; obj << endl; return obj; }",
            "template <typename T> ostream &operator<<(ostream &obj, const vector<vector<T>> &arr) { for (const auto &row : arr) { for (const auto &elem : row) obj << elem << \" \"; obj << endl; } obj << endl; return obj; }",
            "template <typename T> ostream &operator<<(ostream &obj, const vector<vector<vector<T>>> &arr) { int maxi = 0; for (const auto &mat : arr) maxi = max(maxi, (long long)mat.size());",
            "for (int row = 0; row < maxi; ++row) { for (const auto &mat : arr) {if (row < mat.size()) { obj << \"[ \"; for (const auto &elem : mat[row]) obj << elem << \" \"; obj << \"] \"; }",
            "else obj << string(mat[0].size() * 3, ' '); } obj << endl; } obj << endl; return obj;}",
            "void read(vi &arr) { for (int &elem : arr) cin >> elem; }",
            "bool acctosecond(const pii &a, const pii &b) { return a.second < b.second; }",
            "int get_hash(const string &s, int hashvalue = 31, int mod = 9999999967) { int val = 0; for (char ch : s) val = (val * hashvalue + (ch - 'a' + 1)) % mod; return val; }",
            "// clang-format on",
            "",
            "int32_t main() {",
            "    fast",
            "    auto start = chrono::high_resolution_clock::now();",
            "",
            "    $2",
            "",
            "    auto end = chrono::high_resolution_clock::now();",
            "    chrono::duration<double> duration = end - start;",
            "    cout << \"Execution time: \" << duration.count() << \" seconds\" << endl;",
            "    return 0;",
            "}"
        ],
        "description": "Insert a complete C++ utility code with execution timer and compact functions"
    }
}